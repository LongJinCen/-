// 给你一根长度为n的绳子，请把绳子剪成m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为k[0],k[1],...,k[m]。
// 请问k[0]xk[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

/**
 * 题目分析：
 * 先举几个例子，可以看出规律来。
 * 4 ： 2*2
 * 5 ： 2*3
 * 6 ： 3*3
 * 7 ： 2*2*3 或者4*3
 * 8 ： 2*3*3
 * 9 ： 3*3*3
 * 10：2*2*3*3 或者4*3*3
 * 11：2*3*3*3
 * 12：3*3*3*3
 * 13：2*2*3*3*3 或者4*3*3*3
 * 所以只可能是 2 和 3, 所有的长度都可以用 2 和 3 组合起来
 *
 * 乘方运算的复杂度为：O(log n)，用动态规划来做会耗时比较多。
 */
function cutRope(number) {
    // write code here
    if (number <= 2) {
        return 1
    }
    if (number === 3) {
        return 2
    }
    let x = Math.floor(number / 3)
    let y = number % 3
    if (y === 0) {
        return Math.pow(3, x)
    } else if (y === 1) {
        return 2 * 2 * Math.pow(3, x - 1)
    } else {
        return 2 * Math.pow(3, x)
    }
}

