// 使用场景: 大数据当中，查一个数据是否在一个集合里面
// 是一个bit数组，一个整型数组
// 例如 int arr = new int[1000], 例如一个int 4个byte, 就是32位，所以可以表示32000个bit
// 对于一个index， 想让其对应的二进制位变为1
var arr = new Array(1000); // 总共32000个位置
var index = 1000
var intIndex = index / 32
var bitIndex = index % 32
arr[intIndex] = arr[intIndex] | (1 << bitIndex) // 将对应的位置变为1

// 例子1: 有100亿个url, 要求查找黑名单，如果不在黑名单里面需要将这条记录添加进去，每一次来都要判断这个url是否是黑名单里面的
// 确定需要的字节数目: m = (n * lnp)/ (ln2)^2 // n 为样本量, p为预期失误率， m为我们的布隆过滤器需要的bit数，数组长度为 bit / 8 / 4
// 确定hash函数的个数: k = ln2 * m / n = 0.7 * m / n
// 添加: 将url 通过k个hash函数计算,然后取数组长度的模, 每次都去通过上面的方式去描黑布隆过滤器
// 查找: 必须k个hash函数计算出来的位置都被描黑，才能判断这个url进过这个黑名单


// 通过将数组一个位置变为这个数组类型的类型字节数来扩大容量，大大降低了内存的使用，减少了资源消耗

// 数组长度越大，失误率越低
